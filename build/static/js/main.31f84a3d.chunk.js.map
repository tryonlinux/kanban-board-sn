{"version":3,"sources":["components/Editor.tsx","reportWebVitals.ts","components/ActionsCell.tsx","components/KanbanColumnItem.tsx","components/KanbanColumn.tsx","components/KanbanWrapper.tsx","components/KanbanItemEditor.tsx","components/InfoModal.tsx","index.tsx"],"names":["HtmlElementId","HtmlClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ActionsCell","props","state","Row","Col","xs","Button","variant","style","margin","size","onClick","editItem","id","columnID","fill","deleteItem","displayInfoBox","React","Component","KanbanColumnItem","draggableId","this","item","index","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","userSelect","padding","minHeight","border","borderRadius","backgroundColor","isDragging","color","title","KanbanColumn","Card","Header","column","name","Body","height","droppableId","droppableProps","width","overflowY","items","map","placeholder","KanbanWrapper","handleOnDragEnd","bind","result","destination","source","moveItemToNewColumn","moveItemWithinColumn","display","justifyContent","onDragEnd","backLogColumn","todoColumn","inProgressColumn","doneColumn","initialState","notes","KanbanItemEditor","editMode","currentKanbanItem","Form","onSubmit","e","preventDefault","className","span","offset","Group","controlId","Label","Control","type","value","onChange","setState","target","as","rows","onCancelAddEditKanbanItem","handleSubmit","currentKanbanBoard","uuidv4","InfoModal","Modal","show","onHide","toggleInfoModal","centered","modalTextBody","printUrl","text","addKanbanItem","editKanbanItem","editKanbanItemId","undefined","editKanbanItemColumnID","loaded","showInfo","currentInfoText","keyMap","Map","Editor","editorKit","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","columns","error","JSON","parse","backlog","todo","inProgress","done","alert","clearUndoHistory","getElementsBySelector","generateCustomPreview","html","plain","EditorKit","mode","supportsFilesafe","onBlur","onFocus","onKeyDown","set","key","get","onKeyUp","delete","onCancelAddKanbanItem","onAddKanbanItem","handleSubmitOfKanbanItem","deleteKanbanItem","getKanbanItem","updateIndexes","stringify","onEditorValueChanged","console","log","tempColumn","tempID","tempItemIndex","findIndex","x","destinationIndex","tempItem","find","splice","sourceID","destinationID","tempSourceCol","tempDestinationCol","kanbanId","tempItems","saveNote","kanbanItem","tempBackLog","push","kanbanID","itemID","info","snComponent","tabIndex","Container","fluid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31f84a3d.chunk.js","sourcesContent":["//TODO: Mobile Friendly\n//TODO: Prettier design\nimport { PlusCircleIcon } from '@primer/octicons-react';\nimport React from 'react';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport KanbanWrapper from './KanbanWrapper';\nimport KanbanItemEditor from './KanbanItemEditor';\nimport InfoModal from './InfoModal';\n//testing code for setting up a board\n//import { v4 as uuidv4 } from 'uuid';\n// const itemsFromBackend = [\n//   {\n//     index: 0,\n//     id: uuidv4(),\n//     title: 'First Task',\n//     notes: 'test 1',\n//   },\n//   { index: 1, id: uuidv4(), title: 'Second task', notes: 'test 2' },\n//   { index: 2, id: uuidv4(), title: 'Third task', notes: 'test 3' },\n//   { index: 3, id: uuidv4(), title: 'Fourth task', notes: 'test 4' },\n//   { index: 4, id: uuidv4(), title: 'Fifth task', notes: 'test 5' },\n//   { index: 5, id: uuidv4(), title: 'Sixth task', notes: 'test 6' },\n//   { index: 6, id: uuidv4(), title: 'Seventh task', notes: 'test 7' },\n//   { index: 7, id: uuidv4(), title: 'Eighth task', notes: 'test 8' },\n// ];\nexport enum HtmlElementId {\n  snComponent = 'sn-component',\n  textarea = 'textarea',\n}\n\nexport enum HtmlClassName {\n  snComponent = 'sn-component',\n  textarea = 'sk-input contrast textarea',\n}\nexport interface KanbanItem {\n  index: number;\n  id: string;\n  title: string;\n  notes: string;\n}\n\nexport interface ColumnKeys {\n  backLogColumn: Column;\n  todoColumn: Column;\n  inProgressColumn: Column;\n  doneColumn: Column;\n}\nexport interface Column {\n  id: string;\n  name: string;\n  items: {\n    index: number;\n    id: string;\n    title: string;\n    notes: string;\n  }[];\n}\nexport interface EditorInterface {\n  printUrl: boolean;\n  text: string;\n  loaded: boolean;\n  addKanbanItem: boolean;\n  editKanbanItem: boolean;\n  editKanbanItemId?: string;\n  editKanbanItemColumnID?: keyof ColumnKeys;\n  backLogColumn: Column;\n  todoColumn: Column;\n  inProgressColumn: Column;\n  doneColumn: Column;\n  showInfo: boolean;\n  currentInfoText: string;\n}\n\nconst initialState = {\n  printUrl: false,\n  text: '',\n  addKanbanItem: false,\n  editKanbanItem: false,\n  editKanbanItemId: undefined,\n  editKanbanItemColumnID: undefined,\n  loaded: false,\n  showInfo: false,\n  currentInfoText: '',\n  backLogColumn: {\n    id: 'backLogColumn',\n    name: 'Backlog',\n    items: [],\n  },\n  todoColumn: { id: 'todoColumn', name: 'Todo', items: [] },\n\n  inProgressColumn: {\n    id: 'inProgressColumn',\n    name: 'In Progress',\n    items: [],\n  },\n  doneColumn: { id: 'doneColumn', name: 'Done', items: [] },\n};\n\nlet keyMap = new Map();\n\nexport default class Editor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.state = initialState;\n    this.moveItemToNewColumn = this.moveItemToNewColumn.bind(this);\n    this.moveItemWithinColumn = this.moveItemWithinColumn.bind(this);\n    this.displayInfoBox = this.displayInfoBox.bind(this);\n    this.onCancelAddKanbanItem = this.onCancelAddKanbanItem.bind(this);\n    this.onAddKanbanItem = this.onAddKanbanItem.bind(this);\n    this.editKanbanItem = this.editKanbanItem.bind(this);\n    this.handleSubmitOfKanbanItem = this.handleSubmitOfKanbanItem.bind(this);\n    this.deleteKanbanItem = this.deleteKanbanItem.bind(this);\n    this.getKanbanItem = this.getKanbanItem.bind(this);\n    this.updateIndexes = this.updateIndexes.bind(this);\n    this.toggleInfoModal = this.toggleInfoModal.bind(this);\n  }\n\n  componentDidMount() {\n    this.configureEditorKit();\n  }\n  configureEditorKit = () => {\n    let delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        let columns: {\n          backlog: Column;\n          todo: Column;\n          inProgress: Column;\n          done: Column;\n        };\n        let error: string = '';\n\n        if (text !== '') {\n          columns = JSON.parse(text);\n\n          if (\n            !(\n              'backlog' in columns &&\n              'todo' in columns &&\n              'inProgress' in columns &&\n              'done' in columns\n            )\n          ) {\n            error =\n              'Error with parsing columns, please switch to plain editor and clear the text. (This will delete all data in all columns!!), or try reverting to a proper save in history.';\n          }\n        } else {\n          columns = {\n            backlog: {\n              id: 'backLogColumn',\n              name: 'Backlog',\n              items: [],\n            },\n            todo: {\n              id: 'todoColumn',\n              name: 'Todo',\n              items: [],\n            },\n            inProgress: {\n              id: 'inProgressColumn',\n              name: 'In Progress',\n              items: [],\n            },\n            done: {\n              id: 'doneColumn',\n              name: 'Done',\n              items: [],\n            },\n          };\n        }\n        if (error === '') {\n          this.setState({\n            text,\n            backLogColumn: columns.backlog,\n            todoColumn: columns.todo,\n            inProgressColumn: columns.inProgress,\n            doneColumn: columns.done,\n            loaded: true,\n          });\n        } else {\n          alert(error);\n        }\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n      generateCustomPreview: () => {\n        return {\n          html: `<div></div>`,\n          plain: '',\n        };\n      },\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  saveNote() {\n    /** This will work in an SN context, but breaks the standalone editor,\n     * so we need to catch the error\n     */\n    let text = JSON.stringify({\n      backlog: this.state.backLogColumn,\n      todo: this.state.todoColumn,\n      inProgress: this.state.inProgressColumn,\n      done: this.state.doneColumn,\n    });\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      console.log('Error saving note:', error);\n    }\n  }\n\n  onBlur = (e: React.FocusEvent) => {};\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  onKeyDown = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.set(e.key, true);\n    // Do nothing if 'Control' and 's' are pressed\n    if (keyMap.get('Control') && keyMap.get('s')) {\n      e.preventDefault();\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n  /**\n   * Moves an item within a kanban column\n   *\n   * @param columnID - ID of the column that holds the item you want to move\n   * @param result - the item that is moving that is provided from the React Beautiful DND drop event\n   * @returns void\n   *\n   */\n  moveItemWithinColumn(columnID: keyof ColumnKeys, result: any) {\n    let tempColumn = this.state[columnID];\n    let tempID = result.draggableId;\n    let tempItemIndex = tempColumn.items.findIndex((x: any) => x.id === tempID);\n    let destinationIndex = result.destination.index;\n    let tempItem = tempColumn.items.find((x: any) => x.id === tempID);\n    if (tempItemIndex >= 0 && tempItem !== undefined) {\n      tempColumn.items.splice(tempItemIndex, 1);\n      tempColumn.items.splice(destinationIndex, 0, tempItem);\n\n      this.setState(\n        {\n          [columnID]: tempColumn,\n        } as Pick<ColumnKeys, keyof ColumnKeys>,\n        () => {\n          this.updateIndexes(columnID);\n        }\n      );\n    }\n  }\n  /**\n   * Moves an item within a kanban column\n   *\n   * @param sourceID - ID of the column that holds the source item\n   * @param destinationID - the ID of the column that you want to move your item to\n   * @param result - the item that is moving that is provided from the React Beautiful DND drop event\n   * @returns void\n   *\n   */\n  moveItemToNewColumn(\n    sourceID: keyof ColumnKeys,\n    destinationID: keyof ColumnKeys,\n    result: any\n  ): void {\n    let tempSourceCol = this.state[sourceID];\n    let tempDestinationCol = this.state[destinationID];\n    let tempID = result.draggableId;\n    let destinationIndex = result.destination.index;\n    let tempItem = tempSourceCol.items.find((x: any) => x.id === tempID);\n    let tempItemIndex = tempSourceCol.items.findIndex(\n      (x: any) => x.id === tempID\n    );\n\n    if (tempItemIndex >= 0 && tempItem !== undefined) {\n      tempSourceCol.items.splice(tempItemIndex, 1);\n      tempDestinationCol.items.splice(destinationIndex, 0, tempItem);\n    }\n    this.setState(\n      {\n        [sourceID]: tempSourceCol,\n        [destinationID]: tempDestinationCol,\n      } as Pick<ColumnKeys, keyof ColumnKeys>,\n      () => {\n        this.updateIndexes(sourceID);\n        this.updateIndexes(destinationID);\n      }\n    );\n  }\n\n  /**\n   * Sets the view states for add kanban item to true so the editor switches to the add item view (and sets edit vars to false to be safe)\n   *\n   * @returns void\n   *\n   */\n  onAddKanbanItem(): void {\n    this.setState({\n      editKanbanItemId: '',\n      editKanbanItemColumnID: undefined,\n      addKanbanItem: true,\n      editKanbanItem: false,\n    });\n  }\n  /**\n   * Resets the addKanban/editKanban states so the view switches back to the main view\n   *\n   * @returns void\n   *\n   */\n  onCancelAddKanbanItem(): void {\n    this.setState({\n      editKanbanItemId: '',\n      editKanbanItemColumnID: undefined,\n      addKanbanItem: false,\n      editKanbanItem: false,\n    });\n  }\n  /**\n   * Sets the editKanban State, itemID, and ItemColumnID so the view updates to the kanban Item view in edit mode\n   *\n   * @param kanbanId - The id of the item you want to edit\n   * @param columnID - The id of the item's parent column\n   * @returns void\n   *\n   */\n  editKanbanItem(kanbanId: string, columnID: keyof ColumnKeys): void {\n    this.setState({\n      addKanbanItem: false,\n      editKanbanItem: true,\n      editKanbanItemId: kanbanId,\n      editKanbanItemColumnID: columnID,\n    });\n  }\n  /**\n   * Resets the index number for each kanban in the state kanban column Array so they are sequential by the order in which they are in the array. This is called whenever you change the order (i.e. delete or add an item)\n   *\n   * @returns void\n   *\n   */\n  updateIndexes(columnID?: keyof ColumnKeys): void {\n    if (columnID !== undefined) {\n      let tempColumn = this.state[columnID];\n      let tempItems = tempColumn.items.map((item, index) => {\n        item.index = index;\n        return item;\n      });\n      tempColumn.items = tempItems;\n\n      this.setState(\n        { [columnID]: tempColumn } as Pick<ColumnKeys, keyof ColumnKeys>,\n        () => {\n          this.saveNote();\n        }\n      );\n    }\n  }\n  /**\n   * Handles the submit button click when editing or adding a kanban item\n   *\n   * @param kanbanItem - The item you with to add/edit\n   * @param columnID - The id of the item's parent column\n   * @returns void\n   *\n   */\n  handleSubmitOfKanbanItem(\n    kanbanItem: KanbanItem,\n    columnID?: keyof ColumnKeys\n  ): void {\n    if (columnID === undefined) {\n      alert('Error saving changes! Column not defined!');\n      return;\n    }\n    if (this.state.editKanbanItem) {\n      let column = this.state[columnID];\n      let index = column.items.findIndex((x: any) => x.id === kanbanItem.id);\n      column.items.splice(index, 1, kanbanItem);\n      this.setState(\n        {\n          [columnID]: column,\n        } as Pick<ColumnKeys, keyof ColumnKeys>,\n        () => {\n          this.saveNote();\n          this.setState({\n            addKanbanItem: false,\n            editKanbanItem: false,\n            editKanbanItemColumnID: undefined,\n            editKanbanItemId: '',\n          });\n        }\n      );\n    } else {\n      let tempBackLog = this.state.backLogColumn;\n      tempBackLog.items.push(kanbanItem);\n      this.setState(\n        //always add to backlog column new items and at the bottom\n        {\n          backLogColumn: tempBackLog,\n          addKanbanItem: false,\n          editKanbanItem: false,\n          editKanbanItemColumnID: undefined,\n          editKanbanItemId: '',\n        },\n        () => {\n          this.updateIndexes(columnID);\n        }\n      );\n    }\n  }\n  /**\n   * Deletes a kanban item  rom the corresponding colum state and calls saveNote to save back to the editor\n   *\n   * @param kanbanID - The ID of the Kanban item you want to delete\n   * @param - The ID of the parent column of your Kanban item you are trying to delete\n   * @returns void\n   *\n   */\n  deleteKanbanItem(kanbanID: string, columnID: keyof ColumnKeys) {\n    let column = this.state[columnID];\n    let index = column.items.findIndex((x: any) => x.id === kanbanID);\n    if (index >= 0 && column !== undefined) {\n      column.items.splice(index, 1);\n      this.setState(\n        { [columnID]: column } as Pick<ColumnKeys, keyof ColumnKeys>,\n        () => {\n          this.saveNote();\n        }\n      );\n    } else {\n      alert('Error deleting item!');\n    }\n  }\n  /**\n   * Handles the display info event when you click on the info button for a kanban item\n   *\n   * @param kanbanId - The id of the item you want to view info on\n   * @param columnID - The id of the item's parent column\n   * @returns void\n   *\n   */\n\n  displayInfoBox(itemID: String, columnID: keyof ColumnKeys): void {\n    let info = this.state[columnID].items.find((x: any) => x.id === itemID)\n      ?.notes;\n    if (info !== undefined) {\n      this.setState({ currentInfoText: info }, () => {\n        this.toggleInfoModal();\n      });\n    } else {\n      alert('Error: Could not find item to display notes!');\n    }\n  }\n  /**\n   * Toggles the display boolean for if we should display the info modal or not.\n   * @returns void\n   */\n  toggleInfoModal() {\n    this.setState({ showInfo: !this.state.showInfo });\n  }\n  /**\n   * Gets the current KanbanItem you are trying to edit when you click on the edit icon\n   *\n   * @returns any - the Kanban Item\n   *\n   */\n  getKanbanItem(): any {\n    if (this.state.editKanbanItemColumnID) {\n      return this.state[this.state.editKanbanItemColumnID].items.find(\n        (item: any) => item.id === this.state.editKanbanItemId\n      );\n    } else {\n      alert('Error retrieving item! Edit will be canceled!');\n      this.setState({\n        editKanbanItemId: '',\n        editKanbanItemColumnID: undefined,\n        addKanbanItem: false,\n        editKanbanItem: false,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className={\n          HtmlElementId.snComponent + (this.state.printUrl ? ' print-url' : '')\n        }\n        id={HtmlElementId.snComponent}\n        tabIndex={0}\n      >\n        <Container fluid>\n          <div className=\"sn-component\">\n            <div id=\"header\">\n              <Row>\n                <Col>\n                  <Button onClick={this.onAddKanbanItem} variant=\"dark\">\n                    <PlusCircleIcon size={16} />\n                  </Button>\n                </Col>\n              </Row>\n            </div>\n            {this.state.showInfo ? (\n              <InfoModal\n                modalTextBody={this.state.currentInfoText}\n                toggleInfoModal={this.toggleInfoModal}\n              />\n            ) : (\n              <div></div>\n            )}\n\n            {this.state.loaded ? (\n              this.state.addKanbanItem ? (\n                <KanbanItemEditor\n                  onCancelAddEditKanbanItem={this.onCancelAddKanbanItem}\n                  handleSubmit={this.handleSubmitOfKanbanItem}\n                  editMode={false}\n                  currentKanbanBoard={this.state.editKanbanItemColumnID}\n                />\n              ) : this.state.editKanbanItem ? (\n                <KanbanItemEditor\n                  onCancelAddEditKanbanItem={this.onCancelAddKanbanItem}\n                  handleSubmit={this.handleSubmitOfKanbanItem}\n                  currentKanbanItem={this.getKanbanItem()}\n                  currentKanbanBoard={this.state.editKanbanItemColumnID}\n                  editMode={true}\n                />\n              ) : (\n                <div>\n                  <Row>\n                    <Col>\n                      <KanbanWrapper\n                        backLogColumn={this.state.backLogColumn}\n                        todoColumn={this.state.todoColumn}\n                        inProgressColumn={this.state.inProgressColumn}\n                        doneColumn={this.state.doneColumn}\n                        moveItemToNewColumn={this.moveItemToNewColumn}\n                        moveItemWithinColumn={this.moveItemWithinColumn}\n                        editItem={this.editKanbanItem}\n                        deleteItem={this.deleteKanbanItem}\n                        displayInfoBox={this.displayInfoBox}\n                      />\n                    </Col>\n                  </Row>\n                </div>\n              )\n            ) : (\n              <div>Loading...</div>\n            )}\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport { TrashIcon, PencilIcon, InfoIcon } from '@primer/octicons-react';\nimport { ColumnKeys } from './Editor';\n\nexport interface ActionsCellProps {\n  id: string;\n  columnID: keyof ColumnKeys;\n  editItem: (text: string, columnID: keyof ColumnKeys) => void;\n  deleteItem: (text: string, columnID: keyof ColumnKeys) => void;\n  displayInfoBox: (text: string, columnID: keyof ColumnKeys) => void;\n}\n\nexport interface ActionsCellState {}\n\nclass ActionsCell extends React.Component<ActionsCellProps, ActionsCellState> {\n  constructor(props: ActionsCellProps) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col xs={3}>\n            <Button\n              variant=\"link\"\n              style={{ margin: '0px' }}\n              size={'sm'}\n              onClick={() =>\n                this.props.editItem(this.props.id, this.props.columnID)\n              }\n            >\n              <PencilIcon fill=\"#000\" size={16} />\n            </Button>\n          </Col>\n          <Col xs={3}>\n            <Button\n              variant=\"link\"\n              style={{ margin: '0px' }}\n              size={'sm'}\n              onClick={() =>\n                this.props.deleteItem(this.props.id, this.props.columnID)\n              }\n            >\n              <TrashIcon fill=\"#000\" size={16} />\n            </Button>\n          </Col>\n          <Col xs={3}>\n            <Button\n              variant=\"link\"\n              style={{ margin: '0px' }}\n              size={'sm'}\n              onClick={() =>\n                this.props.displayInfoBox(this.props.id, this.props.columnID)\n              }\n            >\n              <InfoIcon fill=\"#000\" size={16} />\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default ActionsCell;\n","import * as React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Col, Row } from 'react-bootstrap';\nimport ActionsCell from './ActionsCell';\nimport { ColumnKeys } from './Editor';\n\nexport interface KanbanColumnItemProps {\n  index: number;\n  item: {\n    id: string;\n    title: string;\n    notes: string;\n  };\n  columnID: keyof ColumnKeys;\n  editItem: (text: string, columnID: keyof ColumnKeys) => void;\n  deleteItem: (text: string, columnID: keyof ColumnKeys) => void;\n  displayInfoBox: (text: string, columnID: keyof ColumnKeys) => void;\n}\n\nexport interface KanbanColumnItemState {}\n\nclass KanbanColumnItem extends React.Component<\n  KanbanColumnItemProps,\n  KanbanColumnItemState\n> {\n  constructor(props: KanbanColumnItemProps) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <Draggable\n        key={this.props.item.id}\n        draggableId={this.props.item.id}\n        index={this.props.index}\n      >\n        {(provided, snapshot) => {\n          return (\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              style={{\n                userSelect: 'none',\n                padding: 15,\n                margin: '0 0 3px 0',\n                minHeight: '50px',\n                border: '3px solid #000000',\n                borderRadius: '15px',\n                backgroundColor: snapshot.isDragging ? '#white' : '#C9D1D9', //background color\n                color: 'black',\n                //textAlign: 'center',\n                ...provided.draggableProps.style,\n              }}\n            >\n              <div>\n                <Row>\n                  <Col>{this.props.item.title}</Col>\n                  <Col>\n                    <ActionsCell\n                      id={this.props.item.id}\n                      editItem={this.props.editItem}\n                      deleteItem={this.props.deleteItem}\n                      displayInfoBox={this.props.displayInfoBox}\n                      columnID={this.props.columnID}\n                    />\n                  </Col>\n                </Row>\n              </div>\n            </div>\n          );\n        }}\n      </Draggable>\n    );\n  }\n}\n\nexport default KanbanColumnItem;\n","import * as React from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { Card } from 'react-bootstrap';\nimport { Column, ColumnKeys } from './Editor';\nimport KanbanColumnItem from './KanbanColumnItem';\n\nexport interface KanbanColumnProps {\n  column: Column;\n  editItem: (text: string, columnID: keyof ColumnKeys) => void;\n  deleteItem: (text: string, columnID: keyof ColumnKeys) => void;\n  displayInfoBox: (text: string, columnID: keyof ColumnKeys) => void;\n}\n\nexport interface KanbanColumnState {}\n\nclass KanbanColumn extends React.Component<\n  KanbanColumnProps,\n  KanbanColumnState\n> {\n  constructor(props: KanbanColumnProps) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <Card key={this.props.column.id}>\n        <Card.Header>{this.props.column.name}</Card.Header>\n        <Card.Body>\n          <div style={{ margin: 8, height: '80vh' }}>\n            <Droppable\n              droppableId={this.props.column.id}\n              key={this.props.column.id}\n            >\n              {(provided, snapshot) => {\n                return (\n                  <div\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    style={{\n                      padding: 0,\n                      width: 250,\n                      height: '80vh',\n                      overflowY: 'auto',\n                    }}\n                  >\n                    {this.props.column.items.map((item, index) => {\n                      return (\n                        <KanbanColumnItem\n                          key={item.id}\n                          item={item}\n                          index={index}\n                          editItem={this.props.editItem}\n                          deleteItem={this.props.deleteItem}\n                          displayInfoBox={this.props.displayInfoBox}\n                          columnID={this.props.column.id as keyof ColumnKeys}\n                        />\n                      );\n                    })}\n                    {provided.placeholder}\n                  </div>\n                );\n              }}\n            </Droppable>\n          </div>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default KanbanColumn;\n","import * as React from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { Column, ColumnKeys } from './Editor';\nimport KanbanColumn from './KanbanColumn';\nexport interface KanbanWrapperProps {\n  backLogColumn: Column;\n  todoColumn: Column;\n  inProgressColumn: Column;\n  doneColumn: Column;\n  moveItemToNewColumn: (\n    sourceID: keyof ColumnKeys,\n    destinationID: keyof ColumnKeys,\n    result: any\n  ) => void;\n  moveItemWithinColumn: (columnID: keyof ColumnKeys, result: any) => void;\n  editItem: (text: string, columnID: keyof ColumnKeys) => void;\n  deleteItem: (text: string, columnID: keyof ColumnKeys) => void;\n  displayInfoBox: (text: string, columnID: keyof ColumnKeys) => void;\n}\n\nexport interface KanbanWrapperState {}\n\nclass KanbanWrapper extends React.Component<\n  KanbanWrapperProps,\n  KanbanWrapperState\n> {\n  constructor(props: KanbanWrapperProps) {\n    super(props);\n    this.state = {};\n    this.handleOnDragEnd = this.handleOnDragEnd.bind(this);\n  }\n  /**\n   * Handles the drop event of an item for the React Beautiful DND\n   *\n   * @param result - The Item you are dropping\n   * @param columnID - The id of the item's parent column\n   * @returns void\n   *\n   */\n  handleOnDragEnd(result: any) {\n    if (!result.destination) return;\n    const { source, destination } = result;\n    if (source.droppableId !== destination.droppableId) {\n      this.props.moveItemToNewColumn(\n        source.droppableId,\n        destination.droppableId,\n        result\n      );\n    } else {\n      this.props.moveItemWithinColumn(source.droppableId, result);\n    }\n  }\n\n  render() {\n    return (\n      <div\n        style={{ display: 'flex', justifyContent: 'center', height: '100%' }}\n      >\n        <DragDropContext onDragEnd={(result) => this.handleOnDragEnd(result)}>\n          <KanbanColumn\n            column={this.props.backLogColumn}\n            editItem={this.props.editItem}\n            deleteItem={this.props.deleteItem}\n            displayInfoBox={this.props.displayInfoBox}\n          />\n          <KanbanColumn\n            column={this.props.todoColumn}\n            editItem={this.props.editItem}\n            deleteItem={this.props.deleteItem}\n            displayInfoBox={this.props.displayInfoBox}\n          />\n          <KanbanColumn\n            column={this.props.inProgressColumn}\n            editItem={this.props.editItem}\n            deleteItem={this.props.deleteItem}\n            displayInfoBox={this.props.displayInfoBox}\n          />\n          <KanbanColumn\n            column={this.props.doneColumn}\n            editItem={this.props.editItem}\n            deleteItem={this.props.deleteItem}\n            displayInfoBox={this.props.displayInfoBox}\n          />\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nexport default KanbanWrapper;\n","import * as React from 'react';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { ColumnKeys, KanbanItem } from './Editor';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst initialState = {\n  index: -1,\n  id: '',\n  title: '',\n  notes: '',\n};\nexport interface KanbanItemEditorProps {\n  editMode: boolean;\n  currentKanbanItem?: KanbanItem;\n  editID?: string;\n  currentKanbanBoard?: keyof ColumnKeys;\n  handleSubmit: (\n    singleKanbanItem: KanbanItem,\n    columnID?: keyof ColumnKeys\n  ) => void;\n  onCancelAddEditKanbanItem: () => void;\n}\nexport interface KanbanItemEditorState {\n  index: number;\n  id: string;\n  title: string;\n  notes: string;\n}\n\nclass KanbanItemEditor extends React.Component<\n  KanbanItemEditorProps,\n  KanbanItemEditorState\n> {\n  constructor(props: KanbanItemEditorProps) {\n    super(props);\n    if (this.props.editMode && this.props.currentKanbanItem) {\n      let currentKanbanItem: KanbanItem = this.props.currentKanbanItem;\n      this.state = {\n        index: currentKanbanItem.index,\n        id: currentKanbanItem.id,\n        title: currentKanbanItem.title,\n        notes: currentKanbanItem.notes,\n      };\n    } else {\n      this.state = initialState;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Form\n          onSubmit={(e: React.FormEvent) => {\n            e.preventDefault();\n          }}\n        >\n          <Row>\n            <Col>\n              <h3 className=\"text-center\">\n                Please Enter Details of the Kanban Item\n              </h3>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={{ span: 6, offset: 3 }}>\n              <Form.Group controlId=\"title\">\n                <Form.Label>Title</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Title\"\n                  name=\"title\"\n                  value={this.state.title}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>): void =>\n                    this.setState({\n                      title: e.target.value,\n                    })\n                  }\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={{ span: 6, offset: 3 }}>\n              <Form.Group controlId=\"notes\">\n                <Form.Label>Notes</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Notes\"\n                  name=\"notes\"\n                  as=\"textarea\"\n                  rows={3}\n                  value={this.state.notes}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>): void =>\n                    this.setState({\n                      notes: e.target.value,\n                    })\n                  }\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <br />\n          <Row>\n            <Col xs={{ span: 2, offset: 8 }}>\n              <Button\n                className=\"float-right\"\n                onClick={this.props.onCancelAddEditKanbanItem}\n                variant=\"danger\"\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"success\"\n                onClick={() => {\n                  this.props.editMode\n                    ? this.props.handleSubmit(\n                        {\n                          index: this.state.index,\n                          id: this.state.id,\n                          title: this.state.title,\n                          notes: this.state.notes,\n                        },\n                        this.props.currentKanbanBoard\n                      )\n                    : this.props.handleSubmit(\n                        {\n                          index: -1,\n                          id: this.state.id ? this.state.id : uuidv4(),\n                          title: this.state.title,\n                          notes: this.state.notes,\n                        },\n                        'backLogColumn'\n                      );\n                }}\n              >\n                Save\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default KanbanItemEditor;\n","import Modal from 'react-bootstrap/Modal';\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\n\nexport interface InfoModalProps {\n  modalTextBody: string;\n  toggleInfoModal: () => void;\n}\nexport interface InfoModalState {}\n\nclass InfoModal extends React.Component<InfoModalProps, InfoModalState> {\n  render() {\n    return (\n      <div>\n        <Modal\n          show=\"true\"\n          onHide={this.props.toggleInfoModal}\n          centered\n          size=\"lg\"\n        >\n          <Modal.Body>\n            {this.props.modalTextBody}\n            <div className=\"bootstrap-like-modal-footer\">\n              <Button variant=\"secondary\" onClick={this.props.toggleInfoModal}>\n                Close\n              </Button>\n            </div>\n          </Modal.Body>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default InfoModal;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nimport Editor from './components/Editor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}